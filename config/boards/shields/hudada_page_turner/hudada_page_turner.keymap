#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        // 定义我们的基础翻页行为 "pg"，它接收一个参数
        // **注意**: 为了让固件能够成功编译，我们暂时将其“伪装”成一个标准的按键行为(&kp)。
        // 这可以验证我们 keymap 的其余部分是正确的。
        // 最终，您需要将其改回您自己的 custom behavior compatible 字符串。
        pg: page_turner {
            compatible = "zmk,behavior-key-press"; // 临时修正：使用一个已存在的 behavior 来通过编译
            label = "PAGE_TURNER";
            #binding-cells = <1>;
        };

        // --- 这是关键修正 ---
        // 1. 单独定义“下翻页”这个完整的行为
        pg_dn: page_down_action {
            compatible = "zmk,behavior-mod-morph"; // 使用mod-morph来包装
            label = "PG_DN";
            #binding-cells = <0>;
            bindings = <&pg N2>; // 在这里把参数传给 &pg (会发送按键 '2')
        };

        // 2. 单独定义“返回”这个完整的行为
        pg_ret: page_return_action {
            compatible = "zmk,behavior-mod-morph";
            label = "PG_RET";
            #binding-cells = <0>;
            bindings = <&pg N3>; // 在这里把参数传给 &pg (会发送按键 '3')
        };
        // --- 修正结束 ---

        // 现在，hold-tap可以引用上面定义好的完整行为了
        down_ret: down_and_return {
            compatible = "zmk,behavior-hold-tap";
            label = "DOWN_RETURN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            // 正确的语法：直接引用两个完整的行为
            bindings = <&pg_dn>, <&pg_ret>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &pg N1    &down_ret // 会发送按键 '1'
            >;
        };
    };
};
