#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/hid_usage.h>
#include <dt-bindings/zmk/hid_usage_pages.h>

/ {
    // 1. 定义行为: 我们自定义的翻页行为，以及一个 hold-tap 行为
    behaviors {
        // 自定义翻页行为，它接收一个参数（HID码）
        pg_turn: page_turner_cmd {
            compatible = "hudada_page_turner,behavior-page-turner-command";
            #binding-cells = <1>;
        };

        // 为第二个按键定义的 hold-tap 行为。
        // 这是本次修正最关键的地方：它的 bindings 直接指向下面定义的两个宏。
        down_ret_ht: down_and_return_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "DOWN_AND_RETURN_HOLD_TAP";
            #binding-cells = <0>; // 这个行为本身不接收来自 keymap 的参数
            tapping-term-ms = <200>;
            // 这里是关键：它的绑定是两个简单的、无参数的宏。这完全符合编译器的语法！
            bindings = <&macro_return>, <&macro_pg_dn>;
        };
    };

    // 2. 定义宏: 将复杂的“行为+参数”封装成简单的宏
    macros {
        macro_pg_up: page_up_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&pg_turn C_SCAN_PREV>;
        };
        macro_pg_dn: page_down_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&pg_turn C_SCAN_NEXT>;
        };
        macro_return: return_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&pg_turn C_AC_BACK>;
        };
    };

    // 3. 应用到按键: 将简单的宏和行为应用到按键映射
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &macro_pg_up      &down_ret_ht
            >;
        };
    };
};